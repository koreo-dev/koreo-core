apiVersion: v1
kind: Namespace
metadata:
  name: koreo-testing
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: empty.v1
  namespace: koreo-testing
  labels:
    koreo.realkinetic.com/bump: "13"
spec:
  outcome:
    okValue: "ok"
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: input-validation-tests.v1
  namespace: koreo-testing
spec:
  inputValidators:
    - assert: =inputs.number < 5
      skip:
        message: number too small, must be over 5.

    - assert: =has(inputs.optional_number) && inputs.optional_number != 3333
      permFail:
        message: optional number not equal to 3333.

    - assert: =inputs.number > 13
      retry:
        message: number too large, must be under 13.
        delay: 90

    - assert: =inputs.number < 1
      permFail:
        message: number too small, must be over 1.
      

    - assert: =has(inputs.optional_retry_number) && inputs.optional_retry_number != 1212
      retry:
        message: optional retry_number not equal to 1212.
        delay: 75

    - assert: =has(inputs.value_for_message)
      skip:
        message: ="value for message (\"" + inputs.value_for_message + "\") was set."
      
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: outcome-tests.v1
  namespace: koreo-testing
spec:
  outcome:
    validators:
      - assert: =inputs.number > 13
        retry:
          message: number too large, must be under 13.
          delay: 90

      - assert: =has(inputs.optional_number) && inputs.optional_number != 3333
        permFail:
          message: optional number not equal to 3333.

      - assert: =has(inputs.output) && inputs.output == 11221122
        ok: {}
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: outcome-ok-value.v1
  namespace: koreo-testing
  labels:
    koreo.realkinetic.com/bump: "4"
spec:
  outcome:
    okValue: "=has(inputs.output) ? inputs.output: null"
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: materializers-base-nested.v1
  namespace: koreo-testing
  labels:
    koreo.realkinetic.com/bump: "12"
spec:
  materializers:
    base:
      apiVersion: tests.koreo.realkinetic.com/v1alpha8
      kind: TestCase
      metadata:
        name: base-test
        namespace: =inputs.metadata.namespace
      spec:
        name: =inputs.person.name
        age: =inputs.person.age
        children.*:
          name: =inputs.person.name + ', Jr.'
          age: =inputs.person.age - 20
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: materializers-base-flat.v1
  namespace: koreo-testing
spec:
  materializers:
    base:
      "apiVersion": tests.koreo.realkinetic.com/v1alpha8
      "kind": TestCase
      "metadata.name": base-test
      "metadata.namespace": =inputs.metadata.namespace
      "spec.name": =inputs.person.name
      "spec.age": =inputs.person.age
      "spec.children.*":
        {
          "name": '=inputs.person.name + ", Jr."',
          "age": "=inputs.person.age - 20",
        }
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: materializers-on-create-nested.v1
  namespace: koreo-testing
spec:
  materializers:
    base:
      apiVersion: tests.koreo.realkinetic.com/v1alpha8
      kind: TestCase
      metadata:
        name: base-test
      spec:
        name: Name of Person
        age: Age of Person
        children:
          - name: Name of Child
            age: Age of Child
    onCreate:
      metadata:
        namespace: =inputs.metadata.namespace
      spec:
        name: =inputs.person.name
        age: =inputs.person.age
        children.*: |
          ={ "name": inputs.person.name + ", Jr.", "age": inputs.person.age - 20 }
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: materializers-on-create-flat.v1
  namespace: koreo-testing
spec:
  materializers:
    base:
      apiVersion: tests.koreo.realkinetic.com/v1alpha8
      kind: TestCase
      metadata:
        name: base-test
      spec:
        name: Name of Person
        age: Age of Person
        children:
          - name: Name of Child
            age: Age of Child
    onCreate:
      "metadata.namespace": =inputs.metadata.namespace
      "spec.name": =inputs.person.name
      "spec.age": =inputs.person.age
      "spec.children.*": |
        ={ "name": inputs.person.name + ", Jr.", "age": inputs.person.age - 20 }
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: gcp-folder.v1
  namespace: koreo-testing
spec:
  outcome:
    validators:
      - assert: =resource.config_connect_ready()
        ok: {}

    okValue: |
      ={"folderId": resource.status.folderId, "ref": resource.self_ref() }

  materializers:
    base:
      apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
      kind: Folder
      metadata: =inputs.metadata
      spec:
        displayName: =inputs.params.name
        folderRef: =inputs.parent_folder.ref.to_ref()
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: dummy-test.v1
  namespace: koreo-testing
spec:
  staticResource:
    managedResource:
      apiVersion: koreo.realkinetic.com/v1alpha8
      kind: TestDummy
      plural: testdummies
      namespaced: true
    behavior:
      update: recreate
  materializers:
    base:
      apiVersion: koreo.realkinetic.com/v1alpha8
      kind: TestDummy
      metadata:
        name: =inputs.parent.metadata.name
        namespace: =string("koreo-testing")
        labels:
          testing.realkinetic.com/key: =inputs.parent.metadata.name
      spec:
        intKey: 99
        strKey: =string("A string!")
        listKey:
          - name: first
            value: 1
          - name: second
            value: 2
        mapKey:
          name: some
          value: 10
        bools:
          aTrue: true
          aFalse: false

  outcome:
    okValue: =resource.metadata.uid
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: dummy-config.v1
  namespace: koreo-testing
spec:
  staticResource:
    behavior:
      load: virtual
      update: never
  outcome:
    okValue: |
      ={
        "parent_name": inputs.parent.metadata.name
      }
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: dynamic-resource-test.v1
  namespace: koreo-testing
spec:
  dynamicResource:
    key: simple-template.v1
  materializers:
    base:
      metadata:
        name: =inputs.config.parent_name + "-simple"
  outcome:
    okValue: =resource.metadata.uid
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: dynamic-key-dynamic-resource-test.v1
  namespace: koreo-testing
spec:
  dynamicResource:
    key: =inputs.template_name
  materializers:
    base:
      metadata:
        name: =inputs.config.parent_name + "-" + inputs.template_name
      spec:
        boolTrue: true
        boolFalse: false
  outcome:
    okValue: =resource.metadata.uid
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: domain-config.v1
  namespace: koreo-testing
spec:
  staticResource:
    behavior:
      load: virtual
      create: false
      update: never
      delete: abandon
  inputValidators:
    - assert: =inputs.parent.metadata.name.matches("^[0-9][a-zA-Z]+")
      permFail:
        message: Domain resource-name must start with a letter.
    - assert: '=!has(inputs.parent.metadata.labels["konfig.realkinetic.com/platform"])'
      permFail:
        message: Domain resource must have platform label.
  outcome:
    okValue: |
      ={
        "domain_resource_name": inputs.parent.metadata.name,
        "namespace": inputs.parent.metadata.namespace,
        "platform_resource_name": inputs.parent.metadata.labels["konfig.realkinetic.com/platform"],
        "domain_human_name": has(inputs.parent.spec.domainName) ? inputs.parent.spec.domainName: inputs.parent.metadata.name
      }
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: domain-subresource-metadata.v1
  namespace: koreo-testing
spec:
  staticResource:
    behavior:
      load: virtual
      create: false
      update: never
      delete: abandon
  outcome:
    okValue: |
      ={
        "name": inputs.config.domain_resource_name,
        "namespace": inputs.config.namespace,
        "labels": {
          "app.kubernetes.io/managed-by": "konfig",
          "konfig.realkinetic.com/platform": inputs.config.platform_resource_name,
          "konfig.realkinetic.com/domain": inputs.config.domain_resource_name,
          "konfig-platform": inputs.config.platform_resource_name,
          "konfig-domain": inputs.config.domain_resource_name,
          "testing": string("is fun!")
        }
      }
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: domain-subresource-value.v1
  namespace: koreo-testing
spec:
  staticResource:
    behavior:
      load: virtual
      create: false
      update: never
      delete: abandon
  inputValidators:
    - assert: "=!has(inputs.metadata.name)"
      permFail:
        message: testing skip encoding
      
  outcome:
    okValue: |
      ={
        "metadata-name": inputs.metadata.name,
        "config-human-name": inputs.config.domain_human_name
      }
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: mapped-input-source.v1
  namespace: koreo-testing
spec:
  staticResource:
    behavior:
      load: virtual
      create: false
      update: never
      delete: abandon
  outcome:
    okValue: =["a", "b", "c", "d", "e"]
---
apiVersion: koreo.realkinetic.com/v1alpha8
kind: Function
metadata:
  name: mapped-input-resource.v1
  namespace: koreo-testing
spec:
  staticResource:
    managedResource:
      apiVersion: koreo.realkinetic.com/v1alpha8
      kind: TestDummy
      plural: testdummies
      namespaced: true
    behavior:
      update: recreate
  materializers:
    base:
      apiVersion: koreo.realkinetic.com/v1alpha8
      kind: TestDummy
      metadata:
        name: ="mapped-dummy-" + string(inputs.key)
        namespace: koreo-testing
      spec:
        fixedInput: =inputs.static_value
        mappedPosition: =inputs.key
        hardCoded:
          string: Demo time
          number: 42

  outcome:
    okValue: =resource.metadata.uid
